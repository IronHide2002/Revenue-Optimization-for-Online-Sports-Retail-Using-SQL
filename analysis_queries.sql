-- sports_retail_analysis.sql
-- Comprehensive SQL Analysis for Sports Retail Database

USE sports_retail;

-- 1. Revenue Analysis

-- 1.1 Total Revenue Generated by All Products
SELECT ROUND(SUM(revenue), 2) AS total_revenue
FROM finance;

-- 1.2 Top 5 Products by Revenue
SELECT i.product_name, f.revenue
FROM finance f
JOIN info i ON f.product_id = i.product_id
ORDER BY f.revenue DESC
LIMIT 5;

-- 1.3 Revenue Breakdown by Brand
SELECT b.brand, ROUND(SUM(f.revenue), 2) AS total_revenue
FROM finance f
JOIN brands b ON f.product_id = b.product_id
GROUP BY b.brand
ORDER BY total_revenue DESC;

-- 1.4 Top Revenue Generated Products with Brands
WITH highest_revenue_product AS (
   SELECT i.product_name,
          b.brand,
          revenue
   FROM finance f
   JOIN info i ON f.product_id = i.product_id
   JOIN brands b ON b.product_id = i.product_id
   WHERE product_name IS NOT NULL 
     AND revenue IS NOT NULL 
     AND brand IS NOT NULL
)
SELECT product_name,
       brand,
       revenue,
       RANK() OVER (ORDER BY revenue DESC) AS product_rank
FROM highest_revenue_product
LIMIT 10;

-- 2. Pricing and Discount Analysis

-- 2.1 Products with the Highest Discount
SELECT i.product_name, f.discount
FROM finance f
JOIN info i ON f.product_id = i.product_id
ORDER BY f.discount DESC
LIMIT 5;

-- 2.2 Products with the Highest Sale Price
SELECT i.product_name, f.sale_price
FROM finance f
JOIN info i ON f.product_id = i.product_id
ORDER BY f.sale_price DESC
LIMIT 5;

-- 2.3 Nike vs Adidas Pricing
SELECT 
    b.brand,
    f.listing_price,
    COUNT(*) AS count
FROM brands b
JOIN finance f ON b.product_id = f.product_id
WHERE f.listing_price > 0
GROUP BY b.brand, f.listing_price
ORDER BY f.listing_price DESC;

-- 2.4 Unique Prices of Products
SELECT COUNT(*) 
FROM (
    SELECT 
        b.brand,
        f.listing_price,
        COUNT(*) AS count
    FROM brands b
    JOIN finance f ON b.product_id = f.product_id
    WHERE f.listing_price > 0
    GROUP BY b.brand, f.listing_price
    ORDER BY f.listing_price DESC
) prod;

-- 2.5 Average Discount by Brand
SELECT 
    b.brand,
    ROUND(AVG(discount)*100,2) as average_discount
FROM brands b
JOIN finance f ON b.product_id = f.product_id
WHERE b.brand IS NOT NULL
GROUP BY b.brand;

-- 2.6 Price Range Labeling
SELECT 
    b.brand,
    COUNT(*) AS product_count,
    SUM(f.revenue) AS total_revenue,
    CASE 
        WHEN f.listing_price < 42 THEN 'Budget'
        WHEN f.listing_price >= 42 AND f.listing_price < 74 THEN 'Average'
        WHEN f.listing_price >= 74 AND f.listing_price < 129 THEN 'Expensive'
        ELSE 'Elite' 
    END AS price_category
FROM brands b
JOIN finance f ON b.product_id = f.product_id
WHERE b.brand IS NOT NULL
GROUP BY 
    b.brand,
    CASE 
        WHEN f.listing_price < 42 THEN 'Budget'
        WHEN f.listing_price >= 42 AND f.listing_price < 74 THEN 'Average'
        WHEN f.listing_price >= 74 AND f.listing_price < 129 THEN 'Expensive'
        ELSE 'Elite' 
    END
ORDER BY total_revenue DESC;

-- 3. Product Ratings and Reviews

-- 3.1 Average Product Rating Across All Products
SELECT ROUND(AVG(rating), 2) AS average_rating
FROM reviews;

-- 3.2 Products with the Most Reviews
SELECT i.product_name, r.reviews
FROM reviews r
JOIN info i ON r.product_id = i.product_id
ORDER BY r.reviews DESC
LIMIT 5;

-- 3.3 Ratings and Reviews by Product Description Length
SELECT 
    TRUNCATE(LENGTH(description) / 100, 0) * 100 AS description_length,
    ROUND(AVG(r.rating), 2) AS average_rating
FROM info i
JOIN reviews r ON i.product_id = r.product_id
WHERE i.description IS NOT NULL
GROUP BY description_length
ORDER BY description_length;

-- 4. Website Traffic Analysis

-- 4.1 Most Recently Viewed Products
SELECT i.product_name, t.last_visited
FROM traffic t
JOIN info i ON t.product_id = i.product_id
ORDER BY t.last_visited DESC
LIMIT 5;

-- 4.2 Reviews by Month and Brand
SELECT
    b.brand,
    MONTH(t.last_visited) AS month,
    COUNT(*) AS num_reviews
FROM brands b
JOIN traffic t ON b.product_id = t.product_id
JOIN reviews r ON r.product_id = t.product_id
WHERE b.brand IS NOT NULL AND b.brand <> ''
  AND t.last_visited IS NOT NULL
GROUP BY b.brand, MONTH(t.last_visited)
ORDER BY b.brand, MONTH(t.last_visited)
LIMIT 0, 1000;

-- 5. Data Quality and Missing Values

-- 5.1 Counting Missing Values
SELECT 
    COUNT(*) as total_rows,
    COUNT(i.description) as count_description,
    COUNT(f.listing_price) as count_listing_price,
    COUNT(t.last_visited) as count_last_visited,
    COUNT(r.rating) as count_rating,
    COUNT(r.reviews) as count_reviews
FROM info i 
JOIN finance f ON i.product_id = f.product_id 
JOIN traffic t ON i.product_id = t.product_id
JOIN reviews r ON i.product_id = r.product_id;

-- 6. Correlation and Statistical Analysis

-- 6.1 Correlation Between Revenue and Reviews
SELECT
    SUM((revenue - avg_rev) * (reviews - avg_reviews)) /
    (SQRT(SUM(POW(revenue - avg_rev, 2))) * SQRT(SUM(POW(reviews - avg_reviews, 2)))) AS review_revenue_correlation
FROM (
    SELECT
        f.revenue,
        r.reviews,
        (SELECT AVG(revenue) FROM finance) AS avg_rev,
        (SELECT AVG(reviews) FROM reviews) AS avg_reviews
    FROM finance f
    JOIN reviews r ON f.product_id = r.product_id
) sub;

-- 7. Product Category Performance

-- 7.1 Footwear Product Performance
WITH footwear AS (
  SELECT i.description, 
         f.revenue
  FROM info i
  INNER JOIN finance f ON i.product_id = f.product_id
  WHERE (
          i.description LIKE '%shoe%' 
       OR i.description LIKE '%trainer%' 
       OR i.description LIKE '%foot%'
        )
    AND i.description IS NOT NULL
),
ranked AS (
  SELECT 
    revenue,
    ROW_NUMBER() OVER (ORDER BY revenue) AS rn,
    COUNT(*) OVER () AS total_count
  FROM footwear
)
SELECT 
  (SELECT COUNT(*) FROM footwear) AS num_footwear_products,
  AVG(revenue) AS median_footwear_revenue
FROM ranked
WHERE rn IN (FLOOR((total_count + 1) / 2), CEIL((total_count + 1) / 2));

-- 7.2 Clothing Product Performance (Excluding Footwear)
WITH footwear AS (
  SELECT i.product_id
  FROM info i
  WHERE (
          LOWER(i.description) LIKE '%shoe%' 
       OR LOWER(i.description) LIKE '%trainer%' 
       OR LOWER(i.description) LIKE '%foot%'
        )
    AND i.description IS NOT NULL
),
clothing AS (
  SELECT i.product_id, i.description, f.revenue
  FROM info i
  INNER JOIN finance f ON i.product_id = f.product_id
  WHERE i.product_id NOT IN (SELECT product_id FROM footwear)
    AND i.description IS NOT NULL
),
ranked AS (
  SELECT 
    revenue,
    ROW_NUMBER() OVER (ORDER BY revenue) AS rn,
    COUNT(*) OVER () AS total_count
  FROM clothing
)
SELECT 
  (SELECT COUNT(*) FROM clothing) AS num_clothing_products,
  AVG(revenue) AS median_clothing_revenue
FROM ranked
WHERE rn IN (FLOOR((total_count + 1) / 2), CEIL((total_count + 1) / 2));

-- 8. Miscellaneous

-- 8.1 Total Number of Reviews
SELECT COUNT(*) FROM reviews;
